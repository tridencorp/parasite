package p2p

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"parasite/key"
	"parasite/tx"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/rlp"
)

var local  = "enode://e806157dfc5e11365210e09ad4af4fb129024de4a8c97c7a6c834daf9567200f9e8d03a769c1d53f13286a643e295b6f38073e90a1833c1e06ef23cc402cfecb@127.0.0.1:30303"
var prv, _ = key.Private()

var BlockHash = "c2fa57aa06932cb8ee7ab0e2aec04dcbdd471902a7bc0c9b9777bbcdffdd0687"

func TestGetBlockHeadersMsg(t *testing.T) {
	p, _ := Connect(local, prv)
	p.Start()
	defer p.Close()

	p.GetBlockHeaders(14_678_700, 1)

	msg := <-p.Response
	if len(msg.Data) != 553 {
		t.Errorf("Expected len to be %d, got %d", 553, len(msg.Data))
	}	

	headers, _ := DecodeBlockHeaders(msg)
	fmt.Println(headers[0])

	if len(headers) != 1 {
		t.Errorf("Expected len to be %d, got %d", 1, len(headers))
	}	

	fmt.Println(headers[0].Hash())
}

func TestGetReceiptsMsg(t *testing.T) {
	p, _ := Connect(local, prv)
	p.Start()
	defer p.Close()

	hash, _ := hex.DecodeString(BlockHash)
	p.GetReceipts([]common.Hash{common.Hash(hash)})

	msg := <-p.Response
	if len(msg.Data) != 85802 {
		t.Errorf("Expected len to be %d, got %d", 85802, len(msg.Data))
	}		
}

func TestGetBlockBodies(t *testing.T) {
	p, _ := Connect(local, prv)
	p.Start()
	defer p.Close()

	hash, _ := hex.DecodeString(BlockHash)
	p.GetBlockBodies([]common.Hash{common.Hash(hash)})

	msg := <-p.Response

	if len(msg.Data) != 50543 {
		t.Errorf("Expected len to be %d, got %d", 50543, len(msg.Data))
	}
	
	bodies, _ := DecodeBlockBodies(msg)
	fmt.Println(bodies)

	if len(bodies[0].Transactions) != 120 {
		t.Errorf("Expected len to be %d, got %d", 120, len(bodies[0].Transactions))
	}

	// data, _ := rlp.EncodeToBytes(bodies[0].Transactions[0])
	// raw := hex.EncodeToString(data)
	// fmt.Println(raw)

	// DynamicFee Tx
	dynamicFeeTx := "b9085f02f9085b01058459682f00850b571afee8830fd91a9468b3465833fb72a70ecdf485e0e4c7bd8665fc45891b1ae4d6e2ef500000b907e45ae401dc00000000000000000000000000000000000000000000000000000000626bc7d60000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000058000000000000000000000000000000000000000000000000000000000000006e000000000000000000000000000000000000000000000000000000000000000e4472b43f30000000000000000000000000000000000000000000000015af1d78b58c400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e404e45aaf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000ee86442fcd06c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e404e45aaf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000bb800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000124b858183f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000410d586a20a4c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb8dac17f958d2ee523a2206206994597c13d831ec7000064a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000124b858183f0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000015af1d78b58c4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000042c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000bb86b175474e89094c44da98b954eedeac495271d0f000064a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064df2ab5bb000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000014ccfefc3350000000000000000000000007910f0923d6e98290c022e01e9b6a10827f1d0df00000000000000000000000000000000000000000000000000000000c001a0e0c3e0034612b2cf3a0b6f525036ee3ab2fd0c4f5bdcce27c6ecff69589ad391a06b4bc01e3c03a81e32d6b81cd843173b43f90ad35a80aba7f689a7117c4ee2e4"
	raw, _ := hex.DecodeString(dynamicFeeTx)

	buf := bytes.NewBuffer(raw)
	transaction := new(tx.Tx)

	transaction.DecodeRLP(rlp.NewStream(buf, 100_000))

	if !bytes.Equal(transaction.To()[:], bodies[0].Transactions[0].To()[:]) {
		t.Errorf("Expected address\nto be %v, \ngot   %v", transaction.To()[:], bodies[0].Transactions[0].To()[:])
	}		

	// Legacy txest 
	legacyTx := "f8aa80850c5d5bd85083019a2894dac17f958d2ee523a2206206994597c13d831ec780b844a9059cbb000000000000000000000000f5614b68d6a1503ba5e52e40189a3998842143e70000000000000000000000000000000000000000000000000000000134c0870026a08595e6b5355d5893572d2e0af7da6c187f93fe56f7c2888a025e9c1e515cee31a025a96fbc30204053d9aa9bb9690e9fd051e1df7fb8f85c45b88abdc7a8ef8f2a"
	raw, _ = hex.DecodeString(legacyTx)

	buf = bytes.NewBuffer(raw)
	transaction = new(tx.Tx)

	transaction.DecodeRLP(rlp.NewStream(buf, 100_000))

	if !bytes.Equal(transaction.To()[:], bodies[0].Transactions[10].To()[:]) {
		t.Errorf("Expected address\nto be %v, \ngot   %v", transaction.To()[:], bodies[0].Transactions[10].To()[:])
	}		
}
